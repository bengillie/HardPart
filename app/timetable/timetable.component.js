"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var timetable_service_1 = require("../service/timetable.service");
var logging_service_1 = require("~/service/logging.service");
var timetable_model_1 = require("~/model/timetable.model");
var TimetableComponent = /** @class */ (function () {
    function TimetableComponent(location, loggingService, timetableService) {
        this.location = location;
        this.loggingService = loggingService;
        this.timetableService = timetableService;
        this.subscriptions = [];
        this.breakText = "";
        this.lessonDate = new Date();
        this.startDate = new Date();
        this.endDate = new Date();
        this.allLessons = [];
        this.lessonsForDate = [];
        this.allPeriods = [];
        this.periodsForDate = [];
        this.current = false;
        this.hasLesson = true;
        this.isLoading = true;
        this.showDetails = true;
    }
    TimetableComponent.prototype.ngOnInit = function () {
        this.startDate.setDate(this.startDate.getDate() - (this.startDate.getDay() - 7));
        this.endDate.setDate(this.endDate.getDate() - (this.endDate.getDay() + 7));
        this.getLessons();
        this.getPeriods();
    };
    TimetableComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.unsubscribe();
            }
        }
    };
    TimetableComponent.prototype.getBreak = function (lesson) {
        var breakTime = timetable_model_1.Break;
        var today = new Date();
        var regexp = new RegExp('B');
        var name = this.getPeriodNameForLesson(lesson);
        if ((new Date(lesson.startDate).getHours() < 12) && regexp.test(name)) {
            this.breakText = breakTime.amBreak;
            this.showDetails = false;
            return true;
        }
        else if ((new Date(lesson.startDate).getHours() >= 12) && regexp.test(name)) {
            this.breakText = breakTime.pmBreak;
            this.showDetails = false;
            return true;
        }
        else {
            this.showDetails = true;
            return false;
        }
    };
    TimetableComponent.prototype.getCurrentLesson = function (lesson) {
        var today = new Date();
        if ((today >= new Date(lesson.startDate)) && (today <= new Date(lesson.endDate))) {
            this.current = true;
            return true;
        }
        else {
            this.current = false;
            return false;
        }
    };
    TimetableComponent.prototype.getLessons = function () {
        var _this = this;
        this.isLoading = true;
        this.subscriptions.push(this.timetableService.getLessons()
            .subscribe(function (lessons) {
            lessons = lessons.sort(function (obj1, obj2) {
                return new Date(obj1.startDate).getHours() - new Date(obj2.startDate).getHours();
            });
            _this.allLessons = lessons;
            _this.getLessonsForDate(_this.lessonDate);
            _this.isLoading = false;
        }));
    };
    TimetableComponent.prototype.getLessonsForDate = function (date) {
        if (!this.allLessons) {
            this.lessonsForDate = [];
            return;
        }
        this.lessonsForDate = this.allLessons.filter(function (l) { return new Date(l.startDate).toDateString() === date.toDateString(); });
        this.getTotalLesson();
    };
    TimetableComponent.prototype.getPeriods = function () {
        var _this = this;
        this.isLoading = true;
        this.subscriptions.push(this.timetableService.getPeriods(new Date(this.startDate), new Date(this.endDate))
            .subscribe(function (p) {
            _this.allPeriods = p;
            _this.isLoading = false;
        }));
    };
    TimetableComponent.prototype.getPeriodsForDate = function () {
    };
    TimetableComponent.prototype.getPeriodNameForLesson = function (lesson) {
        var name = "";
        var startLessonDay = new Date(lesson.startDate).getDay();
        var startLessonHour = new Date(lesson.startDate).getHours();
        var startLessonMinute = new Date(lesson.startDate).getMinutes();
        var endLessonDay = new Date(lesson.endDate).getDay();
        var endLessonHour = new Date(lesson.endDate).getHours();
        var endLessonMinute = new Date(lesson.endDate).getMinutes();
        var period = this.allPeriods.find(function (p) {
            return new Date(p.startDate).getDay() == startLessonDay &&
                new Date(p.startDate).getHours() == startLessonHour &&
                new Date(p.startDate).getMinutes() == startLessonMinute &&
                new Date(p.endDate).getDay() == endLessonDay &&
                new Date(p.endDate).getHours() == endLessonHour &&
                new Date(p.endDate).getMinutes() == endLessonMinute;
        });
        if (period) {
            name = period.name;
        }
        return name;
    };
    TimetableComponent.prototype.getSubjectColour = function (lesson) {
        var subject = timetable_model_1.Subject;
        var color = "";
        switch (lesson.subject) {
            case subject.art: {
                return color = "#8B0000";
            }
            case subject.computing: {
                return color = "#8B4513";
            }
            case subject.design: {
                return color = "#808000";
            }
            case subject.english: {
                return color = "#2ECCFA";
            }
            case subject.geography: {
                return color = "#FA58F4";
            }
            case subject.history: {
                return color = "#04B404";
            }
            case subject.languages: {
                return color = "#BF00FF";
            }
            case subject.math: {
                return color = "#FF8000";
            }
            case subject.music: {
                return color = "#642EFE";
            }
            case subject.pe: {
                return color = "#FFFF00";
            }
            case subject.reg: {
                return color = "#086A87";
            }
            case subject.science: {
                return color = "#FF0000";
            }
        }
    };
    TimetableComponent.prototype.getTotalLesson = function () {
        if (this.lessonsForDate.length === 0) {
            this.hasLesson = false;
        }
        else {
            this.hasLesson = true;
        }
    };
    TimetableComponent.prototype.goBack = function () {
        this.location.back();
    };
    TimetableComponent.prototype.onLeftSwipeClick = function () {
        this.loggingService.log("swipe left");
        this.lessonDate = new Date(this.lessonDate.setDate(this.lessonDate.getDate() - 1));
        this.getLessonsForDate(this.lessonDate);
    };
    TimetableComponent.prototype.onRightSwipeClick = function () {
        this.loggingService.log("swipe right");
        this.lessonDate = new Date(this.lessonDate.setDate(this.lessonDate.getDate() + 1));
        this.getLessonsForDate(this.lessonDate);
    };
    TimetableComponent.prototype.onSwipe = function (args) {
        this.loggingService.log("timetable swipe direction" + args.direction.toString());
        if (args.direction === 1) {
            this.onLeftSwipeClick();
        }
        else {
            this.onRightSwipeClick();
        }
    };
    TimetableComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'ns-timetable',
            templateUrl: './timetable.component.html',
            styleUrls: ['./timetable.component.less']
        }),
        __metadata("design:paramtypes", [common_1.Location,
            logging_service_1.LoggingService,
            timetable_service_1.TimetableService])
    ], TimetableComponent);
    return TimetableComponent;
}());
exports.TimetableComponent = TimetableComponent;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var operators_1 = require("rxjs/operators");
var appvalues_service_1 = require("~/service/appvalues.service");
var error_service_1 = require("../service/error.service");
var httpservice_service_1 = require("../service/httpservice.service");
var logging_service_1 = require("../service/logging.service");
var TimetableService = /** @class */ (function () {
    function TimetableService(appValuesService, errorService, httpService, logService) {
        this.appValuesService = appValuesService;
        this.errorService = errorService;
        this.httpService = httpService;
        this.logService = logService;
        this.url_lesson = 'lesson';
        this.url_period = 'period';
    }
    TimetableService.prototype.getLessons = function (dateRange) {
        var _this = this;
        var loggedInUser = this.appValuesService.getLoggedInUser();
        var params = new http_1.HttpParams();
        params = params.append('userId', loggedInUser.id.toString());
        params = params.append('startDate', JSON.stringify(dateRange));
        params = params.append('endDate', JSON.stringify(dateRange));
        return this.httpService.get(this.url_lesson, params)
            .pipe(operators_1.map(function (lesson) { return lesson; }), operators_1.tap(function (_) { return _this.logService.log("fetched lessons for student id = " + loggedInUser.id.toString()); }), operators_1.catchError(this.errorService.handleError("getLesson student id = " + loggedInUser.id.toString())));
    };
    TimetableService.prototype.getPeriods = function (startDate, endDate) {
        var _this = this;
        var params = new http_1.HttpParams();
        params = params.append('startDate', startDate.toString());
        params = params.append('endDate', endDate.toString());
        // TODO - only get periods between a set of dates by passing in params.
        return this.httpService.get(this.url_period)
            .pipe(operators_1.map(function (periods) { return periods; }), operators_1.tap(function (_) { return _this.logService.log("fetched period = " + startDate.toString() + " to " + endDate.toString()); }), operators_1.catchError(this.errorService.handleError("getPeriod period = " + startDate.toString() + " to " + endDate.toString())));
    };
    TimetableService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [appvalues_service_1.AppValuesService,
            error_service_1.ErrorService,
            httpservice_service_1.HttpService,
            logging_service_1.LoggingService])
    ], TimetableService);
    return TimetableService;
}());
exports.TimetableService = TimetableService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0aW1ldGFibGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEyQztBQUMzQyw2Q0FBa0Q7QUFFbEQsNENBQXNEO0FBTXRELGlFQUErRDtBQUMvRCwwREFBd0Q7QUFDeEQsc0VBQTZEO0FBQzdELDhEQUE0RDtBQUc1RDtJQUlJLDBCQUFvQixnQkFBa0MsRUFDMUMsWUFBMEIsRUFDMUIsV0FBd0IsRUFDeEIsVUFBMEI7UUFIbEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUMxQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixlQUFVLEdBQVYsVUFBVSxDQUFnQjtRQU45QixlQUFVLEdBQUcsUUFBUSxDQUFDO1FBQ3RCLGVBQVUsR0FBRyxRQUFRLENBQUM7SUFLWSxDQUFDO0lBRTNDLHFDQUFVLEdBQVYsVUFBVyxTQUFtQjtRQUE5QixpQkFhQztRQVpHLElBQU0sWUFBWSxHQUFTLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNuRSxJQUFJLE1BQU0sR0FBRyxJQUFJLGlCQUFVLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzdELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDL0QsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUU3RCxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQVcsSUFBSSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUM7YUFDN0QsSUFBSSxDQUNELGVBQUcsQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sRUFBTixDQUFNLENBQUMsRUFDckIsZUFBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsc0NBQW9DLFlBQVksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFJLENBQUMsRUFBckYsQ0FBcUYsQ0FBQyxFQUMvRixzQkFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFXLDRCQUEwQixZQUFZLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBSSxDQUFDLENBQUMsQ0FDOUcsQ0FBQztJQUNOLENBQUM7SUFFRCxxQ0FBVSxHQUFWLFVBQVcsU0FBZSxFQUFFLE9BQWE7UUFBekMsaUJBWUM7UUFYRyxJQUFJLE1BQU0sR0FBRyxJQUFJLGlCQUFVLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDMUQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRXRELHVFQUF1RTtRQUN2RSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQVcsSUFBSSxDQUFDLFVBQVUsQ0FBQzthQUNyRCxJQUFJLENBQ0QsZUFBRyxDQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsT0FBTyxFQUFQLENBQU8sQ0FBQyxFQUN2QixlQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxzQkFBb0IsU0FBUyxDQUFDLFFBQVEsRUFBRSxZQUFPLE9BQU8sQ0FBQyxRQUFRLEVBQUksQ0FBQyxFQUF4RixDQUF3RixDQUFDLEVBQ2xHLHNCQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQVcsd0JBQXNCLFNBQVMsQ0FBQyxRQUFRLEVBQUUsWUFBTyxPQUFPLENBQUMsUUFBUSxFQUFJLENBQUMsQ0FBQyxDQUM3SCxDQUFDO0lBQ04sQ0FBQztJQXBDUSxnQkFBZ0I7UUFENUIsaUJBQVUsRUFBRTt5Q0FLNkIsb0NBQWdCO1lBQzVCLDRCQUFZO1lBQ2IsaUNBQVc7WUFDWixnQ0FBYztPQVA3QixnQkFBZ0IsQ0FtRDVCO0lBQUQsdUJBQUM7Q0FBQSxBQW5ERCxJQW1EQztBQW5EWSw0Q0FBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcblxyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgTGVzc29uLCBQZXJpb2QgfSBmcm9tICcuLi9tb2RlbC90aW1ldGFibGUubW9kZWwnO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnfi9tb2RlbC91c2VyLm1vZGVsJztcclxuXHJcbmltcG9ydCB7IEFwcFZhbHVlc1NlcnZpY2UgfSBmcm9tICd+L3NlcnZpY2UvYXBwdmFsdWVzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFcnJvclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL2Vycm9yLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2UvaHR0cHNlcnZpY2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IExvZ2dpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZS9sb2dnaW5nLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVGltZXRhYmxlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHVybF9sZXNzb24gPSAnbGVzc29uJztcclxuICAgIHByaXZhdGUgdXJsX3BlcmlvZCA9ICdwZXJpb2QnO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwVmFsdWVzU2VydmljZTogQXBwVmFsdWVzU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGVycm9yU2VydmljZTogRXJyb3JTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaHR0cFNlcnZpY2U6IEh0dHBTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nZ2luZ1NlcnZpY2UpIHsgfVxyXG5cclxuICAgIGdldExlc3NvbnMoZGF0ZVJhbmdlOiBzdHJpbmdbXSk6IE9ic2VydmFibGU8TGVzc29uW10+IHtcclxuICAgICAgICBjb25zdCBsb2dnZWRJblVzZXI6IFVzZXIgPSB0aGlzLmFwcFZhbHVlc1NlcnZpY2UuZ2V0TG9nZ2VkSW5Vc2VyKCk7XHJcbiAgICAgICAgbGV0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCk7XHJcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZCgndXNlcklkJywgbG9nZ2VkSW5Vc2VyLmlkLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ3N0YXJ0RGF0ZScsIEpTT04uc3RyaW5naWZ5KGRhdGVSYW5nZSkpO1xyXG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ2VuZERhdGUnLCBKU09OLnN0cmluZ2lmeShkYXRlUmFuZ2UpKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwU2VydmljZS5nZXQ8TGVzc29uW10+KHRoaXMudXJsX2xlc3NvbiwgcGFyYW1zKVxyXG4gICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICBtYXAobGVzc29uID0+IGxlc3NvbiksXHJcbiAgICAgICAgICAgIHRhcChfID0+IHRoaXMubG9nU2VydmljZS5sb2coYGZldGNoZWQgbGVzc29ucyBmb3Igc3R1ZGVudCBpZCA9ICR7bG9nZ2VkSW5Vc2VyLmlkLnRvU3RyaW5nKCl9YCkpLFxyXG4gICAgICAgICAgICBjYXRjaEVycm9yKHRoaXMuZXJyb3JTZXJ2aWNlLmhhbmRsZUVycm9yPExlc3NvbltdPihgZ2V0TGVzc29uIHN0dWRlbnQgaWQgPSAke2xvZ2dlZEluVXNlci5pZC50b1N0cmluZygpfWApKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGVyaW9kcyhzdGFydERhdGU6IERhdGUsIGVuZERhdGU6IERhdGUpOiBPYnNlcnZhYmxlPFBlcmlvZFtdPiB7XHJcbiAgICAgICAgbGV0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCk7XHJcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZCgnc3RhcnREYXRlJywgc3RhcnREYXRlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ2VuZERhdGUnLCBlbmREYXRlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFRPRE8gLSBvbmx5IGdldCBwZXJpb2RzIGJldHdlZW4gYSBzZXQgb2YgZGF0ZXMgYnkgcGFzc2luZyBpbiBwYXJhbXMuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cFNlcnZpY2UuZ2V0PFBlcmlvZFtdPih0aGlzLnVybF9wZXJpb2QpXHJcbiAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcChwZXJpb2RzID0+IHBlcmlvZHMpLFxyXG4gICAgICAgICAgICB0YXAoXyA9PiB0aGlzLmxvZ1NlcnZpY2UubG9nKGBmZXRjaGVkIHBlcmlvZCA9ICR7c3RhcnREYXRlLnRvU3RyaW5nKCl9IHRvICR7ZW5kRGF0ZS50b1N0cmluZygpfWApKSxcclxuICAgICAgICAgICAgY2F0Y2hFcnJvcih0aGlzLmVycm9yU2VydmljZS5oYW5kbGVFcnJvcjxQZXJpb2RbXT4oYGdldFBlcmlvZCBwZXJpb2QgPSAke3N0YXJ0RGF0ZS50b1N0cmluZygpfSB0byAke2VuZERhdGUudG9TdHJpbmcoKX1gKSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIGdldFBlcmlvZHMoZGF0ZVJhbmdlOiBzdHJpbmdbXSk6IE9ic2VydmFibGU8UGVyaW9kW10+IHtcclxuICAgICAgICBsZXQgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcclxuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdzdGFydERhdGUnLCBKU09OLnN0cmluZ2lmeShkYXRlUmFuZ2UpKTtcclxuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdlbmREYXRlJywgSlNPTi5zdHJpbmdpZnkoZGF0ZVJhbmdlKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVE9ETyAtIG9ubHkgZ2V0IHBlcmlvZHMgYmV0d2VlbiBhIHNldCBvZiBkYXRlcyBieSBwYXNzaW5nIGluIHBhcmFtcy5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxQZXJpb2RbXT4odGhpcy51cmwgKyBcInBlcmlvZHNcIiwge3BhcmFtczogcGFyYW1zfSlcclxuICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgbWFwKHBlcmlvZHMgPT4gcGVyaW9kcyksXHJcbiAgICAgICAgICAgIHRhcChfID0+IHRoaXMubG9nU2VydmljZS5sb2coYGZldGNoZWQgcGVyaW9kIGZyb20gJHtkYXRlUmFuZ2VbMF19IHRvICR7ZGF0ZVJhbmdlW2RhdGVSYW5nZS5sZW5ndGgtMV19YCkpLFxyXG4gICAgICAgICAgICBjYXRjaEVycm9yKHRoaXMuZXJyb3JTZXJ2aWNlLmhhbmRsZUVycm9yPFBlcmlvZFtdPihgZ2V0UGVyaW9kcygpOiBwZXJpb2QgPSAke2RhdGVSYW5nZVswXX0gdG8gJHtkYXRlUmFuZ2VbZGF0ZVJhbmdlLmxlbmd0aC0xXX1gKSlcclxuICAgICAgICApO1xyXG4gICAgfSAqL1xyXG59XHJcbiJdfQ==
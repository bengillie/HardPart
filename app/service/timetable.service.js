"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var operators_1 = require("rxjs/operators");
var error_service_1 = require("../service/error.service");
var logging_service_1 = require("../service/logging.service");
var TimetableService = /** @class */ (function () {
    function TimetableService(http, errorService, logService) {
        this.http = http;
        this.errorService = errorService;
        this.logService = logService;
        this.url = 'api/lessons';
        this.parentUrl = 'api/parent';
    }
    TimetableService.prototype.getLesson = function (userId) {
        var _this = this;
        var params = new http_1.HttpParams();
        params = params.append('id', userId.toString());
        return this.http.get(this.url, { params: params })
            .pipe(operators_1.map(function (lesson) { return lesson; }), operators_1.tap(function (_) { return _this.logService.log("fetched user id = " + userId); }), operators_1.catchError(this.errorService.handleError("getLesson() user id = " + userId)));
    };
    TimetableService.prototype.getPeriod = function (startDate, endDate) {
        var _this = this;
        var params = new http_1.HttpParams();
        params = params.append('startDate', startDate.toString());
        params = params.append('endDate', endDate.toString());
        return this.http.get(this.url, { params: params })
            .pipe(operators_1.map(function (period) { return period[0]; }), operators_1.tap(function (_) { return _this.logService.log("fetched period = " + startDate.toString()); }), operators_1.catchError(this.errorService.handleError("getPeriod() period = " + startDate.toString())));
    };
    TimetableService.prototype.getParent = function (userId) {
        var _this = this;
        var url = this.parentUrl + "/" + userId;
        return this.http.get(url)
            .pipe(operators_1.tap(function (_) { return _this.logService.log("fetched parent id = " + userId.toString()); }), operators_1.catchError(this.errorService.handleError("getParent() parent id = " + userId.toString())));
    };
    TimetableService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient,
            error_service_1.ErrorService,
            logging_service_1.LoggingService])
    ], TimetableService);
    return TimetableService;
}());
exports.TimetableService = TimetableService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0aW1ldGFibGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEyQztBQUMzQyw2Q0FBOEQ7QUFFOUQsNENBQXNEO0FBRXRELDBEQUF3RDtBQUN4RCw4REFBNEQ7QUFNNUQ7SUFJSSwwQkFDWSxJQUFnQixFQUNoQixZQUEwQixFQUMxQixVQUEwQjtRQUYxQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGVBQVUsR0FBVixVQUFVLENBQWdCO1FBTjlCLFFBQUcsR0FBRyxhQUFhLENBQUM7UUFDcEIsY0FBUyxHQUFHLFlBQVksQ0FBQztJQU03QixDQUFDO0lBRUwsb0NBQVMsR0FBVCxVQUFVLE1BQWM7UUFBeEIsaUJBVUM7UUFURyxJQUFJLE1BQU0sR0FBRyxJQUFJLGlCQUFVLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFaEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFZLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFDLENBQUM7YUFDMUQsSUFBSSxDQUNELGVBQUcsQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sRUFBTixDQUFNLENBQUMsRUFDckIsZUFBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsdUJBQXFCLE1BQVEsQ0FBQyxFQUFsRCxDQUFrRCxDQUFDLEVBQzVELHNCQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQVksMkJBQXlCLE1BQVEsQ0FBQyxDQUFDLENBQzFGLENBQUM7SUFDTixDQUFDO0lBRUQsb0NBQVMsR0FBVCxVQUFVLFNBQWUsRUFBRSxPQUFhO1FBQXhDLGlCQVdDO1FBVkcsSUFBSSxNQUFNLEdBQUcsSUFBSSxpQkFBVSxFQUFFLENBQUM7UUFDOUIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzFELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUV0RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQzthQUN4RCxJQUFJLENBQ0QsZUFBRyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFULENBQVMsQ0FBQyxFQUN4QixlQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxzQkFBb0IsU0FBUyxDQUFDLFFBQVEsRUFBSSxDQUFDLEVBQS9ELENBQStELENBQUMsRUFDekUsc0JBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBVSwwQkFBd0IsU0FBUyxDQUFDLFFBQVEsRUFBSSxDQUFDLENBQUMsQ0FDckcsQ0FBQztJQUNOLENBQUM7SUFFRCxvQ0FBUyxHQUFULFVBQVUsTUFBYztRQUF4QixpQkFRQztRQVBHLElBQU0sR0FBRyxHQUFNLElBQUksQ0FBQyxTQUFTLFNBQUksTUFBUSxDQUFDO1FBRTFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBUyxHQUFHLENBQUM7YUFDaEMsSUFBSSxDQUNELGVBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLHlCQUF1QixNQUFNLENBQUMsUUFBUSxFQUFJLENBQUMsRUFBL0QsQ0FBK0QsQ0FBQyxFQUN6RSxzQkFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFTLDZCQUEyQixNQUFNLENBQUMsUUFBUSxFQUFJLENBQUMsQ0FBQyxDQUNwRyxDQUFDO0lBQ04sQ0FBQztJQTNDUSxnQkFBZ0I7UUFENUIsaUJBQVUsRUFBRTt5Q0FNUyxpQkFBVTtZQUNGLDRCQUFZO1lBQ2QsZ0NBQWM7T0FQN0IsZ0JBQWdCLENBcUQ1QjtJQUFELHVCQUFDO0NBQUEsQUFyREQsSUFxREM7QUFyRFksNENBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOyBcblxuaW1wb3J0IHsgRXJyb3JTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZS9lcnJvci5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2dpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZS9sb2dnaW5nLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBMZXNzb25zLCBQZXJpb2RzIH0gZnJvbSAnLi4vbW9kZWwvdGltZXRhYmxlLm1vZGVsJztcbmltcG9ydCB7IFBhcmVudCB9IGZyb20gJy4uL21vZGVsL3VzZXIubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGltZXRhYmxlU2VydmljZSB7XG4gICAgcHJpdmF0ZSB1cmwgPSAnYXBpL2xlc3NvbnMnO1xuICAgIHByaXZhdGUgcGFyZW50VXJsID0gJ2FwaS9wYXJlbnQnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICAgICAgcHJpdmF0ZSBlcnJvclNlcnZpY2U6IEVycm9yU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dnaW5nU2VydmljZVxuICAgICkgeyB9XG4gICAgXG4gICAgZ2V0TGVzc29uKHVzZXJJZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxMZXNzb25zW10+IHtcbiAgICAgICAgbGV0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCk7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ2lkJywgdXNlcklkLnRvU3RyaW5nKCkpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8TGVzc29uc1tdPih0aGlzLnVybCwge3BhcmFtczogcGFyYW1zfSlcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICBtYXAobGVzc29uID0+IGxlc3NvbiksXG4gICAgICAgICAgICB0YXAoXyA9PiB0aGlzLmxvZ1NlcnZpY2UubG9nKGBmZXRjaGVkIHVzZXIgaWQgPSAke3VzZXJJZH1gKSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKHRoaXMuZXJyb3JTZXJ2aWNlLmhhbmRsZUVycm9yPExlc3NvbnNbXT4oYGdldExlc3NvbigpIHVzZXIgaWQgPSAke3VzZXJJZH1gKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRQZXJpb2Qoc3RhcnREYXRlOiBEYXRlLCBlbmREYXRlOiBEYXRlKTogT2JzZXJ2YWJsZTxQZXJpb2RzPiB7XG4gICAgICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdzdGFydERhdGUnLCBzdGFydERhdGUudG9TdHJpbmcoKSk7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ2VuZERhdGUnLCBlbmREYXRlLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBlcmlvZHM+KHRoaXMudXJsLCB7cGFyYW1zOiBwYXJhbXN9KVxuICAgICAgICAucGlwZShcbiAgICAgICAgICAgIG1hcChwZXJpb2QgPT4gcGVyaW9kWzBdKSxcbiAgICAgICAgICAgIHRhcChfID0+IHRoaXMubG9nU2VydmljZS5sb2coYGZldGNoZWQgcGVyaW9kID0gJHtzdGFydERhdGUudG9TdHJpbmcoKX1gKSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKHRoaXMuZXJyb3JTZXJ2aWNlLmhhbmRsZUVycm9yPFBlcmlvZHM+KGBnZXRQZXJpb2QoKSBwZXJpb2QgPSAke3N0YXJ0RGF0ZS50b1N0cmluZygpfWApKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFBhcmVudCh1c2VySWQ6IG51bWJlcik6IE9ic2VydmFibGU8UGFyZW50PiB7XG4gICAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMucGFyZW50VXJsfS8ke3VzZXJJZH1gO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBhcmVudD4odXJsKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICAgIHRhcChfID0+IHRoaXMubG9nU2VydmljZS5sb2coYGZldGNoZWQgcGFyZW50IGlkID0gJHt1c2VySWQudG9TdHJpbmcoKX1gKSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKHRoaXMuZXJyb3JTZXJ2aWNlLmhhbmRsZUVycm9yPFBhcmVudD4oYGdldFBhcmVudCgpIHBhcmVudCBpZCA9ICR7dXNlcklkLnRvU3RyaW5nKCl9YCkpXG4gICAgICAgICk7XG4gICAgfVxuXG4vKiAgICAgZ2V0UGVyaW9kKHN0YXJ0RGF0ZTogRGF0ZSwgZW5kRGF0ZTogRGF0ZSk6IE9ic2VydmFibGU8UGVyaW9kc1tdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBlcmlvZHNbXT4odGhpcy51cmwpXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgICAgbWFwKHBlcmlvZCA9PiBwZXJpb2QpLFxuICAgICAgICAgICAgdGFwKF8gPT4gdGhpcy5sb2dTZXJ2aWNlLmxvZyhgZmV0Y2hlZCBwZXJpb2QgPSAke3N0YXJ0RGF0ZS50b1N0cmluZygpfWApKSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IodGhpcy5lcnJvclNlcnZpY2UuaGFuZGxlRXJyb3I8UGVyaW9kc1tdPihgZ2V0UGVyaW9kIHBlcmlvZCA9ICR7c3RhcnREYXRlLnRvU3RyaW5nKCl9YCkpXG4gICAgICAgICk7XG4gICAgfSAqL1xufVxuIl19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var timetable_model_1 = require("~/model/timetable.model");
var appvalues_service_1 = require("~/service/appvalues.service");
var homework_service_1 = require("~/service/homework.service");
var logging_service_1 = require("~/service/logging.service");
var timetable_service_1 = require("../service/timetable.service");
var TimetableComponent = /** @class */ (function () {
    function TimetableComponent(appValuesService, homeworkService, loggingService, router, timetableService) {
        this.appValuesService = appValuesService;
        this.homeworkService = homeworkService;
        this.loggingService = loggingService;
        this.router = router;
        this.timetableService = timetableService;
        this.subscriptions = [];
        this.breakPeriodLabel = "";
        this.homeworkIcon = "";
        this.lessonDate = new Date();
        this.startDate = new Date();
        this.endDate = new Date();
        this.allLessons = [];
        this.lessonsForDate = [];
        this.allPeriods = [];
        this.periodsForDate = [];
        this.allHomeworks = [];
        this.allDueHomeworks = [];
        this.current = false;
        this.hasLesson = true;
        this.isDueLesson = false;
        this.isLoading = true;
        this.lastLesson = false;
        this.showDetails = false;
        this.tabDate = [];
    }
    TimetableComponent.prototype.ngOnInit = function () {
        this.loggedInUser = this.appValuesService.getLoggedInUser();
        this.startDate.setDate(this.startDate.getDate() - (this.startDate.getDay() + 7));
        this.endDate.setDate(this.endDate.getDate() - (this.endDate.getDay() - 7));
        this.getDate();
        this.getAllHomework();
        this.getLessons();
        this.getPeriods();
    };
    TimetableComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.unsubscribe();
            }
        }
    };
    TimetableComponent.prototype.getAllHomework = function () {
        var _this = this;
        this.subscriptions.push(this.homeworkService.getStudentHomework(this.loggedInUser.id)
            .subscribe(function (homework) {
            _this.allHomeworks = homework;
        }));
    };
    TimetableComponent.prototype.getBreak = function (lesson) {
        var breakTimeName = timetable_model_1.Break;
        this.breakPeriodLabel = "";
        var regexp = new RegExp('B');
        var name = this.getPeriodNameForLesson(lesson);
        if ((new Date(lesson.startDate).getHours() < 12) && regexp.test(name)) {
            this.breakPeriodLabel = breakTimeName.amBreak;
            this.showDetails = false;
            return true;
        }
        if ((new Date(lesson.startDate).getHours() >= 12) && regexp.test(name)) {
            this.breakPeriodLabel = breakTimeName.pmBreak;
            this.showDetails = false;
            return true;
        }
        this.showDetails = true;
        return false;
    };
    TimetableComponent.prototype.getCurrentLesson = function (lesson) {
        var today = new Date();
        if ((today >= new Date(lesson.startDate)) && (today <= new Date(lesson.endDate))) {
            this.current = true;
            return true;
        }
        else {
            this.current = false;
            return false;
        }
    };
    TimetableComponent.prototype.getDate = function () {
        // one week previous date
        var minDate = new Date();
        minDate.setDate(minDate.getDate() - (minDate.getDay() + 7));
        // two weeks future date
        var maxDate = new Date();
        maxDate.setDate(maxDate.getDate() - (maxDate.getDay() - 20));
        var tabItemDate = new Date();
        do {
            tabItemDate = new Date(minDate.setDate(minDate.getDate() + 1));
            this.tabDate.push(tabItemDate);
            if (tabItemDate.getDate() === this.lessonDate.getDate()) {
                this.tabSelectedIndex = this.tabDate.findIndex(function (x) { return x === tabItemDate; }) - 1;
            }
        } while (tabItemDate < maxDate);
    };
    TimetableComponent.prototype.getHomeworkDueDate = function (lesson) {
        var dueHomework = this.allHomeworks.find(function (h) {
            return h.subject == lesson.subject;
        });
        if (dueHomework != undefined) {
            this.allDueHomeworks.push(dueHomework);
            var isDue = this.homeworkService.isDue(dueHomework);
            if (isDue === true) {
                this.isDueLesson = true;
                this.homeworkIcon = String.fromCharCode(0xe91f);
                return true;
            }
        }
        return false;
    };
    TimetableComponent.prototype.getLessons = function () {
        var _this = this;
        this.subscriptions.push(this.timetableService.getLessons()
            .subscribe(function (lessons) {
            lessons = lessons.sort(function (obj1, obj2) {
                return new Date(obj1.startDate).getHours() - new Date(obj2.startDate).getHours();
            });
            _this.allLessons = lessons;
            _this.getLessonsForDate(_this.lessonDate);
            _this.tabSelectedIndex++;
        }));
    };
    TimetableComponent.prototype.getLessonsForDate = function (date) {
        this.isLoading = true;
        if (!this.allLessons) {
            this.lessonsForDate = [];
            return;
        }
        this.lessonsForDate = this.allLessons.filter(function (l) { return new Date(l.startDate).toDateString() === date.toDateString(); });
        this.getTotalLesson();
        this.isLoading = false;
    };
    TimetableComponent.prototype.getPeriods = function () {
        var _this = this;
        this.subscriptions.push(this.timetableService.getPeriods(new Date(this.startDate), new Date(this.endDate))
            .subscribe(function (p) {
            _this.allPeriods = p;
        }));
    };
    TimetableComponent.prototype.getPeriodNameForLesson = function (lesson) {
        var name = "";
        var startLessonDay = new Date(lesson.startDate).getDay();
        var startLessonHour = new Date(lesson.startDate).getHours();
        var startLessonMinute = new Date(lesson.startDate).getMinutes();
        var endLessonDay = new Date(lesson.endDate).getDay();
        var endLessonHour = new Date(lesson.endDate).getHours();
        var endLessonMinute = new Date(lesson.endDate).getMinutes();
        var period = this.allPeriods.find(function (p) {
            return new Date(p.startDate).getDay() == startLessonDay &&
                new Date(p.startDate).getHours() == startLessonHour &&
                new Date(p.startDate).getMinutes() == startLessonMinute &&
                new Date(p.endDate).getDay() == endLessonDay &&
                new Date(p.endDate).getHours() == endLessonHour &&
                new Date(p.endDate).getMinutes() == endLessonMinute;
        });
        if (period) {
            name = period.name;
        }
        return name;
    };
    TimetableComponent.prototype.getSubjectColour = function (lesson) {
        var subject = timetable_model_1.Subject;
        var color = "";
        switch (lesson.subject) {
            case subject.art: {
                color = "#8B0000";
                break;
            }
            case subject.computing: {
                color = "#8B4513";
                break;
            }
            case subject.design: {
                color = "#808000";
                break;
            }
            case subject.english: {
                color = "#2ECCFA";
                break;
            }
            case subject.geography: {
                color = "#FA58F4";
                break;
            }
            case subject.history: {
                color = "#04B404";
                break;
            }
            case subject.languages: {
                color = "#BF00FF";
                break;
            }
            case subject.math: {
                color = "#FF8000";
                break;
            }
            case subject.music: {
                color = "#642EFE";
                break;
            }
            case subject.pe: {
                color = "#FFFF00";
                break;
            }
            case subject.reg: {
                color = "#086A87";
                break;
            }
            case subject.science: {
                color = "#FF0000";
                break;
            }
        }
        return color;
    };
    TimetableComponent.prototype.getTotalLesson = function () {
        if (this.lessonsForDate.length === 0) {
            this.hasLesson = false;
        }
        else {
            this.hasLesson = true;
        }
    };
    TimetableComponent.prototype.onTabSwipe = function (args) {
        if (args.oldIndex !== -1) {
            this.getLessonsForDate(this.tabDate[args.newIndex]);
        }
    };
    TimetableComponent.prototype.onTapHomework = function (lesson) {
        var homework = this.allDueHomeworks.find(function (h) {
            return h.subject == lesson.subject;
        });
        this.router.navigate(["/homeworkdetails/" + homework.id]);
    };
    TimetableComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'ns-timetable',
            templateUrl: './timetable.component.html',
            styleUrls: ['./timetable.component.less']
        }),
        __metadata("design:paramtypes", [appvalues_service_1.AppValuesService,
            homework_service_1.HomeworkService,
            logging_service_1.LoggingService,
            router_1.Router,
            timetable_service_1.TimetableService])
    ], TimetableComponent);
    return TimetableComponent;
}());
exports.TimetableComponent = TimetableComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXRhYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRpbWV0YWJsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkU7QUFDM0UsMENBQXlDO0FBS3pDLDJEQUF5RDtBQUd6RCxpRUFBK0Q7QUFDL0QsK0RBQTZEO0FBQzdELDZEQUEyRDtBQUMzRCxrRUFBZ0U7QUFTaEU7SUErQkksNEJBQ1ksZ0JBQWtDLEVBQ2xDLGVBQWdDLEVBQ2hDLGNBQThCLEVBQzlCLE1BQWMsRUFDZCxnQkFBa0M7UUFKbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBbkN0QyxrQkFBYSxHQUFvQixFQUFFLENBQUM7UUFFNUMscUJBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBSWxCLGVBQVUsR0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzlCLGNBQVMsR0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzdCLFlBQU8sR0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO1FBRTNCLGVBQVUsR0FBYSxFQUFFLENBQUM7UUFDMUIsbUJBQWMsR0FBYSxFQUFFLENBQUM7UUFFOUIsZUFBVSxHQUFhLEVBQUUsQ0FBQztRQUMxQixtQkFBYyxHQUFhLEVBQUUsQ0FBQztRQUU5QixpQkFBWSxHQUFlLEVBQUUsQ0FBQztRQUM5QixvQkFBZSxHQUFlLEVBQUUsQ0FBQztRQUVqQyxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDakIsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFDcEIsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNqQixlQUFVLEdB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ZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFNlbGVjdGVkSW5kZXhDaGFuZ2VkRXZlbnREYXRhIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvdGFiLXZpZXdcIjtcclxuXHJcbmltcG9ydCB7IExlc3NvbiwgUGVyaW9kIH0gZnJvbSBcIi4uL21vZGVsL3RpbWV0YWJsZS5tb2RlbFwiO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBCcmVhayB9IGZyb20gJ34vbW9kZWwvdGltZXRhYmxlLm1vZGVsJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJ34vbW9kZWwvdXNlci5tb2RlbCc7XHJcblxyXG5pbXBvcnQgeyBBcHBWYWx1ZXNTZXJ2aWNlIH0gZnJvbSAnfi9zZXJ2aWNlL2FwcHZhbHVlcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSG9tZXdvcmtTZXJ2aWNlIH0gZnJvbSAnfi9zZXJ2aWNlL2hvbWV3b3JrLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2dnaW5nU2VydmljZSB9IGZyb20gJ34vc2VydmljZS9sb2dnaW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUaW1ldGFibGVTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2UvdGltZXRhYmxlLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgSG9tZXdvcmsgfSBmcm9tICd+L21vZGVsL2hvbWV3b3JrLm1vZGVsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcclxuICAgIHNlbGVjdG9yOiAnbnMtdGltZXRhYmxlJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi90aW1ldGFibGUuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vdGltZXRhYmxlLmNvbXBvbmVudC5sZXNzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFRpbWV0YWJsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA6IFN1YnNjcmlwdGlvbltdID0gW107XHJcbiAgICBcclxuICAgIGJyZWFrUGVyaW9kTGFiZWwgPSBcIlwiO1xyXG4gICAgaG9tZXdvcmtJY29uID0gXCJcIjtcclxuXHJcbiAgICBsb2dnZWRJblVzZXI6IFVzZXI7XHJcbiAgICBcclxuICAgIGxlc3NvbkRhdGU6IERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgc3RhcnREYXRlOiBEYXRlID0gbmV3IERhdGUoKTtcclxuICAgIGVuZERhdGU6IERhdGUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgIGFsbExlc3NvbnM6IExlc3NvbltdID0gW107XHJcbiAgICBsZXNzb25zRm9yRGF0ZTogTGVzc29uW10gPSBbXTtcclxuXHJcbiAgICBhbGxQZXJpb2RzOiBQZXJpb2RbXSA9IFtdO1xyXG4gICAgcGVyaW9kc0ZvckRhdGU6IFBlcmlvZFtdID0gW107XHJcblxyXG4gICAgYWxsSG9tZXdvcmtzOiBIb21ld29ya1tdID0gW107XHJcbiAgICBhbGxEdWVIb21ld29ya3M6IEhvbWV3b3JrW10gPSBbXTtcclxuXHJcbiAgICBjdXJyZW50ID0gZmFsc2U7XHJcbiAgICBoYXNMZXNzb24gPSB0cnVlO1xyXG4gICAgaXNEdWVMZXNzb24gPSBmYWxzZTtcclxuICAgIGlzTG9hZGluZyA9IHRydWU7XHJcbiAgICBsYXN0TGVzc29uID0gZmFsc2U7XHJcbiAgICBzaG93RGV0YWlscyA9IGZhbHNlO1xyXG4gICAgXHJcbiAgICB0YWJEYXRlID0gW107XHJcbiAgICB0YWJTZWxlY3RlZEluZGV4OiBudW1iZXI7XHJcbiAgICAgICAgICAgXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGFwcFZhbHVlc1NlcnZpY2U6IEFwcFZhbHVlc1NlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBob21ld29ya1NlcnZpY2U6IEhvbWV3b3JrU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGxvZ2dpbmdTZXJ2aWNlOiBMb2dnaW5nU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxyXG4gICAgICAgIHByaXZhdGUgdGltZXRhYmxlU2VydmljZTogVGltZXRhYmxlU2VydmljZSxcclxuICAgICkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7IFxyXG4gICAgICAgIHRoaXMubG9nZ2VkSW5Vc2VyID0gdGhpcy5hcHBWYWx1ZXNTZXJ2aWNlLmdldExvZ2dlZEluVXNlcigpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXJ0RGF0ZS5zZXREYXRlKHRoaXMuc3RhcnREYXRlLmdldERhdGUoKSAtICh0aGlzLnN0YXJ0RGF0ZS5nZXREYXkoKSArIDcpKTtcclxuICAgICAgICB0aGlzLmVuZERhdGUuc2V0RGF0ZSh0aGlzLmVuZERhdGUuZ2V0RGF0ZSgpIC0gKHRoaXMuZW5kRGF0ZS5nZXREYXkoKSAtIDcpKTtcclxuXHJcbiAgICAgICAgdGhpcy5nZXREYXRlKCk7XHJcbiAgICAgICAgdGhpcy5nZXRBbGxIb21ld29yaygpO1xyXG4gICAgICAgIHRoaXMuZ2V0TGVzc29ucygpO1xyXG4gICAgICAgIHRoaXMuZ2V0UGVyaW9kcygpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbnMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgc3Vic2NyaXB0aW9uIG9mIHRoaXMuc3Vic2NyaXB0aW9ucylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWxsSG9tZXdvcmsoKSB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5ob21ld29ya1NlcnZpY2UuZ2V0U3R1ZGVudEhvbWV3b3JrKHRoaXMubG9nZ2VkSW5Vc2VyLmlkKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAgICAgaG9tZXdvcmsgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsSG9tZXdvcmtzID0gaG9tZXdvcms7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QnJlYWsobGVzc29uOiBMZXNzb24pOiBib29sZWFuIHsgICAgXHJcbiAgICAgICAgbGV0IGJyZWFrVGltZU5hbWUgPSBCcmVhaztcclxuXHJcbiAgICAgICAgdGhpcy5icmVha1BlcmlvZExhYmVsID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHJlZ2V4cCA9IG5ldyBSZWdFeHAoJ0InKTtcclxuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5nZXRQZXJpb2ROYW1lRm9yTGVzc29uKGxlc3Nvbik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKChuZXcgRGF0ZShsZXNzb24uc3RhcnREYXRlKS5nZXRIb3VycygpIDwgMTIpICYmIHJlZ2V4cC50ZXN0KG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnJlYWtQZXJpb2RMYWJlbCA9IGJyZWFrVGltZU5hbWUuYW1CcmVhaztcclxuICAgICAgICAgICAgdGhpcy5zaG93RGV0YWlscyA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IFxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICgobmV3IERhdGUobGVzc29uLnN0YXJ0RGF0ZSkuZ2V0SG91cnMoKSA+PSAxMikgJiYgcmVnZXhwLnRlc3QobmFtZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5icmVha1BlcmlvZExhYmVsID0gYnJlYWtUaW1lTmFtZS5wbUJyZWFrO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dEZXRhaWxzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNob3dEZXRhaWxzID10cnVlO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDdXJyZW50TGVzc29uKGxlc3NvbjogTGVzc29uKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IHRvZGF5ID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICAgICAgaWYgKCh0b2RheSA+PSBuZXcgRGF0ZShsZXNzb24uc3RhcnREYXRlKSkgJiYgKHRvZGF5IDw9IG5ldyBEYXRlKGxlc3Nvbi5lbmREYXRlKSkpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0ZSgpIHtcclxuICAgICAgICAvLyBvbmUgd2VlayBwcmV2aW91cyBkYXRlXHJcbiAgICAgICAgbGV0IG1pbkRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIG1pbkRhdGUuc2V0RGF0ZShtaW5EYXRlLmdldERhdGUoKSAtIChtaW5EYXRlLmdldERheSgpICsgNykpO1xyXG5cclxuICAgICAgICAvLyB0d28gd2Vla3MgZnV0dXJlIGRhdGVcclxuICAgICAgICBsZXQgbWF4RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgbWF4RGF0ZS5zZXREYXRlKG1heERhdGUuZ2V0RGF0ZSgpIC0gKG1heERhdGUuZ2V0RGF5KCkgLSAyMCkpO1xyXG5cclxuICAgICAgICBsZXQgdGFiSXRlbURhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgdGFiSXRlbURhdGUgPSBuZXcgRGF0ZShtaW5EYXRlLnNldERhdGUobWluRGF0ZS5nZXREYXRlKCkgKyAxKSk7XHJcbiAgICAgICAgICAgIHRoaXMudGFiRGF0ZS5wdXNoKHRhYkl0ZW1EYXRlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh0YWJJdGVtRGF0ZS5nZXREYXRlKCkgPT09IHRoaXMubGVzc29uRGF0ZS5nZXREYXRlKCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFiU2VsZWN0ZWRJbmRleCA9IHRoaXMudGFiRGF0ZS5maW5kSW5kZXgoeCA9PiB4ID09PSB0YWJJdGVtRGF0ZSkgLSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSB3aGlsZSAodGFiSXRlbURhdGUgPCBtYXhEYXRlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRIb21ld29ya0R1ZURhdGUobGVzc29uOiBMZXNzb24pOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBkdWVIb21ld29yayA9IHRoaXMuYWxsSG9tZXdvcmtzLmZpbmQoaCA9PlxyXG4gICAgICAgICAgICBoLnN1YmplY3QgPT0gbGVzc29uLnN1YmplY3RcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoZHVlSG9tZXdvcmsgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsRHVlSG9tZXdvcmtzLnB1c2goZHVlSG9tZXdvcmspO1xyXG4gICAgICAgICAgICBsZXQgaXNEdWUgPSB0aGlzLmhvbWV3b3JrU2VydmljZS5pc0R1ZShkdWVIb21ld29yaylcclxuXHJcbiAgICAgICAgICAgIGlmIChpc0R1ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0R1ZUxlc3NvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvbWV3b3JrSWNvbiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhlOTFmKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGVzc29ucygpIHtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLnRpbWV0YWJsZVNlcnZpY2UuZ2V0TGVzc29ucygpXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgICAgICBsZXNzb25zID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXNzb25zID0gbGVzc29ucy5zb3J0ICgob2JqMTogTGVzc29uLCBvYmoyOiBMZXNzb24pICA9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG9iajEuc3RhcnREYXRlKS5nZXRIb3VycygpIC0gbmV3IERhdGUob2JqMi5zdGFydERhdGUpLmdldEhvdXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsTGVzc29ucyA9IGxlc3NvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRMZXNzb25zRm9yRGF0ZSh0aGlzLmxlc3NvbkRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFiU2VsZWN0ZWRJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGVzc29uc0ZvckRhdGUoZGF0ZTogRGF0ZSkge1xyXG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICBpZiAoIXRoaXMuYWxsTGVzc29ucykge1xyXG4gICAgICAgICAgICB0aGlzLmxlc3NvbnNGb3JEYXRlID0gW107XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGVzc29uc0ZvckRhdGUgPSB0aGlzLmFsbExlc3NvbnMuZmlsdGVyKGwgPT4gbmV3IERhdGUobC5zdGFydERhdGUpLnRvRGF0ZVN0cmluZygpID09PSBkYXRlLnRvRGF0ZVN0cmluZygpKTtcclxuICAgICAgICB0aGlzLmdldFRvdGFsTGVzc29uKCk7XHJcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQZXJpb2RzKCkge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxyXG4gICAgICAgICAgICB0aGlzLnRpbWV0YWJsZVNlcnZpY2UuZ2V0UGVyaW9kcyhuZXcgRGF0ZSh0aGlzLnN0YXJ0RGF0ZSksIG5ldyBEYXRlKHRoaXMuZW5kRGF0ZSkpXHJcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKHAgPT4geyBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFsbFBlcmlvZHMgPSBwO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBlcmlvZE5hbWVGb3JMZXNzb24obGVzc29uOiBMZXNzb24pOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBuYW1lID0gXCJcIjtcclxuXHJcbiAgICAgICAgY29uc3Qgc3RhcnRMZXNzb25EYXkgPSBuZXcgRGF0ZShsZXNzb24uc3RhcnREYXRlKS5nZXREYXkoKTtcclxuICAgICAgICBjb25zdCBzdGFydExlc3NvbkhvdXIgPSBuZXcgRGF0ZShsZXNzb24uc3RhcnREYXRlKS5nZXRIb3VycygpO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0TGVzc29uTWludXRlID0gbmV3IERhdGUobGVzc29uLnN0YXJ0RGF0ZSkuZ2V0TWludXRlcygpO1xyXG4gICAgICAgIGNvbnN0IGVuZExlc3NvbkRheSA9IG5ldyBEYXRlKGxlc3Nvbi5lbmREYXRlKS5nZXREYXkoKTtcclxuICAgICAgICBjb25zdCBlbmRMZXNzb25Ib3VyID0gbmV3IERhdGUobGVzc29uLmVuZERhdGUpLmdldEhvdXJzKCk7XHJcbiAgICAgICAgY29uc3QgZW5kTGVzc29uTWludXRlID0gbmV3IERhdGUobGVzc29uLmVuZERhdGUpLmdldE1pbnV0ZXMoKTtcclxuXHJcbiAgICAgICAgY29uc3QgcGVyaW9kID0gdGhpcy5hbGxQZXJpb2RzLmZpbmQocCA9PiBcclxuICAgICAgICAgICAgbmV3IERhdGUocC5zdGFydERhdGUpLmdldERheSgpID09IHN0YXJ0TGVzc29uRGF5ICYmIFxyXG4gICAgICAgICAgICBuZXcgRGF0ZShwLnN0YXJ0RGF0ZSkuZ2V0SG91cnMoKSA9PSBzdGFydExlc3NvbkhvdXIgJiYgXHJcbiAgICAgICAgICAgIG5ldyBEYXRlKHAuc3RhcnREYXRlKS5nZXRNaW51dGVzKCkgPT0gc3RhcnRMZXNzb25NaW51dGUgJiYgXHJcbiAgICAgICAgICAgIG5ldyBEYXRlKHAuZW5kRGF0ZSkuZ2V0RGF5KCkgPT0gZW5kTGVzc29uRGF5ICYmIFxyXG4gICAgICAgICAgICBuZXcgRGF0ZShwLmVuZERhdGUpLmdldEhvdXJzKCkgPT0gZW5kTGVzc29uSG91ciAmJiBcclxuICAgICAgICAgICAgbmV3IERhdGUocC5lbmREYXRlKS5nZXRNaW51dGVzKCkgPT0gZW5kTGVzc29uTWludXRlXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKHBlcmlvZCl7XHJcbiAgICAgICAgICAgIG5hbWUgPSBwZXJpb2QubmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICB9ICBcclxuXHJcbiAgICBnZXRTdWJqZWN0Q29sb3VyKGxlc3NvbjogTGVzc29uKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgc3ViamVjdCA9IFN1YmplY3Q7XHJcbiAgICAgICAgbGV0IGNvbG9yID0gXCJcIjtcclxuXHJcbiAgICAgICAgc3dpdGNoIChsZXNzb24uc3ViamVjdCkge1xyXG4gICAgICAgICAgICBjYXNlIHN1YmplY3QuYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvciA9IFwiIzhCMDAwMFwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBzdWJqZWN0LmNvbXB1dGluZzoge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBcIiM4QjQ1MTNcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2Ugc3ViamVjdC5kZXNpZ246IHtcclxuICAgICAgICAgICAgICAgIGNvbG9yID0gXCIjODA4MDAwXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIHN1YmplY3QuZW5nbGlzaDoge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBcIiMyRUNDRkFcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2Ugc3ViamVjdC5nZW9ncmFwaHk6IHtcclxuICAgICAgICAgICAgICAgIGNvbG9yID0gXCIjRkE1OEY0XCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIHN1YmplY3QuaGlzdG9yeToge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBcIiMwNEI0MDRcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2Ugc3ViamVjdC5sYW5ndWFnZXM6IHtcclxuICAgICAgICAgICAgICAgIGNvbG9yID0gXCIjQkYwMEZGXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIHN1YmplY3QubWF0aDoge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBcIiNGRjgwMDBcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2Ugc3ViamVjdC5tdXNpYzoge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBcIiM2NDJFRkVcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2Ugc3ViamVjdC5wZToge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBcIiNGRkZGMDBcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2Ugc3ViamVjdC5yZWc6IHtcclxuICAgICAgICAgICAgICAgIGNvbG9yID0gXCIjMDg2QTg3XCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIHN1YmplY3Quc2NpZW5jZToge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBcIiNGRjAwMDBcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VG90YWxMZXNzb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGVzc29uc0ZvckRhdGUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzTGVzc29uID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmhhc0xlc3NvbiA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uVGFiU3dpcGUoYXJnczogU2VsZWN0ZWRJbmRleENoYW5nZWRFdmVudERhdGEpIHsgICAgICAgIFxyXG4gICAgICAgIGlmIChhcmdzLm9sZEluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLmdldExlc3NvbnNGb3JEYXRlKHRoaXMudGFiRGF0ZVthcmdzLm5ld0luZGV4XSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uVGFwSG9tZXdvcmsobGVzc29uOiBMZXNzb24pIHtcclxuICAgICAgICBjb25zdCBob21ld29yayA9IHRoaXMuYWxsRHVlSG9tZXdvcmtzLmZpbmQoaCA9PlxyXG4gICAgICAgICAgICBoLnN1YmplY3QgPT0gbGVzc29uLnN1YmplY3RcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbYC9ob21ld29ya2RldGFpbHMvJHtob21ld29yay5pZH1gXSk7XHJcbiAgICB9XHJcbn0iXX0=
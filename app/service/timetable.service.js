"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var operators_1 = require("rxjs/operators");
var error_service_1 = require("../service/error.service");
var logging_service_1 = require("../service/logging.service");
var appvalues_service_1 = require("~/service/appvalues.service");
var TimetableService = /** @class */ (function () {
    function TimetableService(http, appValuesService, errorService, logService) {
        this.http = http;
        this.appValuesService = appValuesService;
        this.errorService = errorService;
        this.logService = logService;
        this.url = 'api/';
    }
    TimetableService.prototype.getLessons = function (dateRange) {
        var _this = this;
        var loggedInUser = this.appValuesService.getLoggedInUser();
        var params = new http_1.HttpParams();
        params = params.append('userId', loggedInUser.id.toString());
        params = params.append('startDate', JSON.stringify(dateRange));
        params = params.append('endDate', JSON.stringify(dateRange));
        return this.http.get(this.url + "lessons", { params: params })
            .pipe(operators_1.map(function (lesson) { return lesson; }), operators_1.tap(function (_) { return _this.logService.log("fetched lessons for student id = " + loggedInUser.id.toString()); }), operators_1.catchError(this.errorService.handleError("getLesson student id = " + loggedInUser.id.toString())));
    };
    TimetableService.prototype.getPeriods = function (startDate, endDate) {
        var _this = this;
        var params = new http_1.HttpParams();
        params = params.append('startDate', startDate.toString());
        params = params.append('endDate', endDate.toString());
        // TODO - only get periods between a set of dates by passing in params.
        return this.http.get(this.url + "periods")
            .pipe(operators_1.map(function (periods) { return periods; }), operators_1.tap(function (_) { return _this.logService.log("fetched period = " + startDate.toString() + " to " + endDate.toString()); }), operators_1.catchError(this.errorService.handleError("getPeriod period = " + startDate.toString() + " to " + endDate.toString())));
    };
    TimetableService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient,
            appvalues_service_1.AppValuesService,
            error_service_1.ErrorService,
            logging_service_1.LoggingService])
    ], TimetableService);
    return TimetableService;
}());
exports.TimetableService = TimetableService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0aW1ldGFibGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEyQztBQUMzQyw2Q0FBOEQ7QUFFOUQsNENBQXNEO0FBRXRELDBEQUF3RDtBQUN4RCw4REFBNEQ7QUFHNUQsaUVBQStEO0FBSS9EO0lBR0ksMEJBQ1ksSUFBZ0IsRUFDaEIsZ0JBQWtDLEVBQ2xDLFlBQTBCLEVBQzFCLFVBQTBCO1FBSDFCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixlQUFVLEdBQVYsVUFBVSxDQUFnQjtRQU45QixRQUFHLEdBQUcsTUFBTSxDQUFDO0lBT2pCLENBQUM7SUFFTCxxQ0FBVSxHQUFWLFVBQVcsU0FBbUI7UUFBOUIsaUJBYUM7UUFaRyxJQUFNLFlBQVksR0FBUyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDbkUsSUFBSSxNQUFNLEdBQUcsSUFBSSxpQkFBVSxFQUFFLENBQUM7UUFDOUIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUM3RCxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFN0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFXLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxFQUFFLEVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBQyxDQUFDO2FBQ3JFLElBQUksQ0FDRCxlQUFHLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLEVBQU4sQ0FBTSxDQUFDLEVBQ3JCLGVBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLHNDQUFvQyxZQUFZLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBSSxDQUFDLEVBQXJGLENBQXFGLENBQUMsRUFDL0Ysc0JBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBVyw0QkFBMEIsWUFBWSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUksQ0FBQyxDQUFDLENBQzlHLENBQUM7SUFDTixDQUFDO0lBRUQscUNBQVUsR0FBVixVQUFXLFNBQWUsRUFBRSxPQUFhO1FBQXpDLGlCQVlDO1FBWEcsSUFBSSxNQUFNLEdBQUcsSUFBSSxpQkFBVSxFQUFFLENBQUM7UUFDOUIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzFELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUV0RCx1RUFBdUU7UUFDdkUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFXLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDO2FBQ25ELElBQUksQ0FDRCxlQUFHLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxPQUFPLEVBQVAsQ0FBTyxDQUFDLEVBQ3ZCLGVBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLHNCQUFvQixTQUFTLENBQUMsUUFBUSxFQUFFLFlBQU8sT0FBTyxDQUFDLFFBQVEsRUFBSSxDQUFDLEVBQXhGLENBQXdGLENBQUMsRUFDbEcsc0JBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBVyx3QkFBc0IsU0FBUyxDQUFDLFFBQVEsRUFBRSxZQUFPLE9BQU8sQ0FBQyxRQUFRLEVBQUksQ0FBQyxDQUFDLENBQzdILENBQUM7SUFDTixDQUFDO0lBckNRLGdCQUFnQjtRQUQ1QixpQkFBVSxFQUFFO3lDQUtTLGlCQUFVO1lBQ0Usb0NBQWdCO1lBQ3BCLDRCQUFZO1lBQ2QsZ0NBQWM7T0FQN0IsZ0JBQWdCLENBb0Q1QjtJQUFELHVCQUFDO0NBQUEsQUFwREQsSUFvREM7QUFwRFksNENBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOyBcclxuXHJcbmltcG9ydCB7IEVycm9yU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2UvZXJyb3Iuc2VydmljZSc7XHJcbmltcG9ydCB7IExvZ2dpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZS9sb2dnaW5nLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgTGVzc29uLCBQZXJpb2QgfSBmcm9tICcuLi9tb2RlbC90aW1ldGFibGUubW9kZWwnO1xyXG5pbXBvcnQgeyBBcHBWYWx1ZXNTZXJ2aWNlIH0gZnJvbSAnfi9zZXJ2aWNlL2FwcHZhbHVlcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJ34vbW9kZWwvdXNlci5tb2RlbCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBUaW1ldGFibGVTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgdXJsID0gJ2FwaS8nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgICAgICBwcml2YXRlIGFwcFZhbHVlc1NlcnZpY2U6IEFwcFZhbHVlc1NlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBlcnJvclNlcnZpY2U6IEVycm9yU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ2dpbmdTZXJ2aWNlXHJcbiAgICApIHsgfVxyXG4gICAgXHJcbiAgICBnZXRMZXNzb25zKGRhdGVSYW5nZTogc3RyaW5nW10pOiBPYnNlcnZhYmxlPExlc3NvbltdPiB7XHJcbiAgICAgICAgY29uc3QgbG9nZ2VkSW5Vc2VyOiBVc2VyID0gdGhpcy5hcHBWYWx1ZXNTZXJ2aWNlLmdldExvZ2dlZEluVXNlcigpO1xyXG4gICAgICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xyXG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ3VzZXJJZCcsIGxvZ2dlZEluVXNlci5pZC50b1N0cmluZygpKTtcclxuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdzdGFydERhdGUnLCBKU09OLnN0cmluZ2lmeShkYXRlUmFuZ2UpKTtcclxuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdlbmREYXRlJywgSlNPTi5zdHJpbmdpZnkoZGF0ZVJhbmdlKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8TGVzc29uW10+KHRoaXMudXJsICsgXCJsZXNzb25zXCIsIHtwYXJhbXM6IHBhcmFtc30pXHJcbiAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcChsZXNzb24gPT4gbGVzc29uKSxcclxuICAgICAgICAgICAgdGFwKF8gPT4gdGhpcy5sb2dTZXJ2aWNlLmxvZyhgZmV0Y2hlZCBsZXNzb25zIGZvciBzdHVkZW50IGlkID0gJHtsb2dnZWRJblVzZXIuaWQudG9TdHJpbmcoKX1gKSksXHJcbiAgICAgICAgICAgIGNhdGNoRXJyb3IodGhpcy5lcnJvclNlcnZpY2UuaGFuZGxlRXJyb3I8TGVzc29uW10+KGBnZXRMZXNzb24gc3R1ZGVudCBpZCA9ICR7bG9nZ2VkSW5Vc2VyLmlkLnRvU3RyaW5nKCl9YCkpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQZXJpb2RzKHN0YXJ0RGF0ZTogRGF0ZSwgZW5kRGF0ZTogRGF0ZSk6IE9ic2VydmFibGU8UGVyaW9kW10+IHtcclxuICAgICAgICBsZXQgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcclxuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdzdGFydERhdGUnLCBzdGFydERhdGUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZCgnZW5kRGF0ZScsIGVuZERhdGUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVE9ETyAtIG9ubHkgZ2V0IHBlcmlvZHMgYmV0d2VlbiBhIHNldCBvZiBkYXRlcyBieSBwYXNzaW5nIGluIHBhcmFtcy5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxQZXJpb2RbXT4odGhpcy51cmwgKyBcInBlcmlvZHNcIilcclxuICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgbWFwKHBlcmlvZHMgPT4gcGVyaW9kcyksXHJcbiAgICAgICAgICAgIHRhcChfID0+IHRoaXMubG9nU2VydmljZS5sb2coYGZldGNoZWQgcGVyaW9kID0gJHtzdGFydERhdGUudG9TdHJpbmcoKX0gdG8gJHtlbmREYXRlLnRvU3RyaW5nKCl9YCkpLFxyXG4gICAgICAgICAgICBjYXRjaEVycm9yKHRoaXMuZXJyb3JTZXJ2aWNlLmhhbmRsZUVycm9yPFBlcmlvZFtdPihgZ2V0UGVyaW9kIHBlcmlvZCA9ICR7c3RhcnREYXRlLnRvU3RyaW5nKCl9IHRvICR7ZW5kRGF0ZS50b1N0cmluZygpfWApKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogZ2V0UGVyaW9kcyhkYXRlUmFuZ2U6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxQZXJpb2RbXT4ge1xyXG4gICAgICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xyXG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ3N0YXJ0RGF0ZScsIEpTT04uc3RyaW5naWZ5KGRhdGVSYW5nZSkpO1xyXG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ2VuZERhdGUnLCBKU09OLnN0cmluZ2lmeShkYXRlUmFuZ2UpKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBUT0RPIC0gb25seSBnZXQgcGVyaW9kcyBiZXR3ZWVuIGEgc2V0IG9mIGRhdGVzIGJ5IHBhc3NpbmcgaW4gcGFyYW1zLlxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBlcmlvZFtdPih0aGlzLnVybCArIFwicGVyaW9kc1wiLCB7cGFyYW1zOiBwYXJhbXN9KVxyXG4gICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICBtYXAocGVyaW9kcyA9PiBwZXJpb2RzKSxcclxuICAgICAgICAgICAgdGFwKF8gPT4gdGhpcy5sb2dTZXJ2aWNlLmxvZyhgZmV0Y2hlZCBwZXJpb2QgZnJvbSAke2RhdGVSYW5nZVswXX0gdG8gJHtkYXRlUmFuZ2VbZGF0ZVJhbmdlLmxlbmd0aC0xXX1gKSksXHJcbiAgICAgICAgICAgIGNhdGNoRXJyb3IodGhpcy5lcnJvclNlcnZpY2UuaGFuZGxlRXJyb3I8UGVyaW9kW10+KGBnZXRQZXJpb2RzKCk6IHBlcmlvZCA9ICR7ZGF0ZVJhbmdlWzBdfSB0byAke2RhdGVSYW5nZVtkYXRlUmFuZ2UubGVuZ3RoLTFdfWApKVxyXG4gICAgICAgICk7XHJcbiAgICB9ICovXHJcbn1cclxuIl19